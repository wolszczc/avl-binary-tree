{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Helper.js","webpack:///./src/index.js","webpack:///./src/Delete.js","webpack:///./src/Search.js","webpack:///./src/TreeNode.js","webpack:///./src/Insert.js","webpack:///./src/AVLTree.js"],"names":["Helper","root","subTreeA","right","left","height","maxRootHeight","Math","max","getHeight","valueA","valueB","getMinValueNode","key","path","value","split","forEach","keyName","Delete","comparator","getValueFromObject","deleteNode","rootRight","rootLeft","minValueRoot","balance","getBalance","rightRotate","leftRotate","Search","find","TreeNode","Insert","insertToNode","AVLTree","compare"],"mappings":"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","file":"avl-tree.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","export default class Helper {\r\n  /**\r\n   * Rotate tree to left\r\n   * @param {AVLTree} root \r\n   * @returns {AVLTree} root rotate to left\r\n   */\r\n  static leftRotate (root) {\r\n    const subTreeA = root.right;\r\n\r\n    // perform rotation\r\n    [subTreeA.left, root.right] = [root, subTreeA.left]\r\n\r\n    // update heights\r\n    root.height = 1 + Helper.maxRootHeight(root)\r\n    subTreeA.height = 1 + Helper.maxRootHeight(subTreeA)\r\n\r\n    // the new root\r\n    return subTreeA\r\n  }\r\n\r\n  /**\r\n   * Rotate tree to right\r\n   * @param {AVLTree} root \r\n   * @returns {AVLTree} root rotate to right\r\n   */\r\n  static rightRotate (root) {\r\n    const subTreeA = root.left;\r\n\r\n    // perform rotation\r\n    [subTreeA.right, root.left] = [root, subTreeA.right]\r\n\r\n    // update heights\r\n    root.height = 1 + Helper.maxRootHeight(root)\r\n    subTreeA.height = 1 + Helper.maxRootHeight(subTreeA)\r\n\r\n    // the new root\r\n    return subTreeA\r\n  }\r\n\r\n  /**\r\n   * Get tree height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} height of tree\r\n   */\r\n  static getHeight (root) {\r\n    return !root ? 0 : root.height\r\n  }\r\n\r\n  /**\r\n   * Get maximum tree height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} maximum height of branchs\r\n   */\r\n  static maxRootHeight (root) {\r\n    return Math.max(Helper.getHeight(root.left), Helper.getHeight(root.right))\r\n  }\r\n\r\n  /**\r\n   * Get balanced height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} balanced value of branch height\r\n   */\r\n  static getBalance (root) {\r\n    return !root ? 0 : Helper.getHeight(root.left) - Helper.getHeight(root.right)\r\n  }\r\n\r\n  /**\r\n   * Default comparator of two values\r\n   * @param {Number|String} valueA \r\n   * @param {Number|String} valueB \r\n   * @returns {boolean} comparison valueA and valueB\r\n   */\r\n  static compare (valueA, valueB) {\r\n    return valueA < valueB\r\n  }\r\n\r\n  /**\r\n   * Get minimum root of tree. Depends from comparator.\r\n   * @param {AVLTree} root \r\n   * @returns {AVLTree} root with the smalest value\r\n   */\r\n  static getMinValueNode(root) {\r\n    if (root === null || root.left === null) {\r\n      return root\r\n    }\r\n    return Helper.getMinValueNode(root.left)\r\n  }\r\n\r\n  /**\r\n   * Get value from object\r\n   * @param {Object} key - searched object\r\n   * @param {String} path - path to value in object\r\n   * @returns {Any} - value of path in object\r\n   */\r\n  static getValueFromObject (key, path) {\r\n    let value = key\r\n    path.split('.').forEach((keyName) => {\r\n      value = value[keyName]\r\n    })\r\n    return value\r\n  }\r\n}","import AVLTree from './AVLTree.js'\r\n\r\nexport default AVLTree","import Helper from './Helper'\r\n\r\nexport default class Delete {\r\n  /**\r\n   * Delete node with input value\r\n   * @param {AVLTree} root \r\n   * @param {Any} key \r\n   * @param {String} path - list of keys in object path\r\n   * @param {Function} comparator compare two object|value\r\n   * @returns {AVLTree} new tree without deleted node\r\n   */\r\n  static deleteNode (root, key, path, comparator) {\r\n    // Perform standard BST delete\r\n    if (!root) {\r\n      return root\r\n    } else {\r\n      let value = root.value\r\n      // if object get value from key\r\n      if(typeof root.value === 'object') {\r\n        value = Helper.getValueFromObject(root.value, path)\r\n      }\r\n      if (key < value) {\r\n        root.left = Delete.deleteNode(root.left, key, path, comparator)\r\n      } else if (key > value) {\r\n        root.right = Delete.deleteNode(root.right, key, path, comparator)\r\n      } else {\r\n        if (!root.left) {\r\n          const rootRight = root.right\r\n          root = null\r\n          return rootRight\r\n        } else if (!root.right) {\r\n          const rootLeft = root.left\r\n          root = null \r\n          return rootLeft\r\n        }\r\n        const minValueRoot = Helper.getMinValueNode(root.right)\r\n        root.value = minValueRoot.value\r\n        root.right = Delete.deleteNode(root.right, minValueRoot, comparator)\r\n      }\r\n    }\r\n\r\n    // If the tree has only one node\r\n    if (!root) {\r\n      return root\r\n    }\r\n\r\n    // Update the height of the ancestor node\r\n    root.height = 1 + Helper.maxRootHeight(root)\r\n    \r\n    // Get the balance factor\r\n    const balance = Helper.getBalance(root)\r\n\r\n    // If the node is unbalanced\r\n    // Left Left\r\n    if (balance > 1 && Helper.getBalance(root.left) >= 0 ) {\r\n      return Helper.rightRotate(root)\r\n    }\r\n    // Right Right\r\n    if (balance < -1 && Helper.getBalance(root.right) <= 0 ) {\r\n      return Helper.leftRotate(root)\r\n    }\r\n    // Left Right\r\n    if (balance > 1 && Helper.getBalance(root.left) < 0 ) {\r\n      root.left = Helper.leftRotate(root.left)\r\n      return Helper.rightRotate(root)\r\n    }\r\n    // Right Left\r\n    if (balance < -1 && Helper.getBalance(root.right) > 0 ) {\r\n      root.right = Helper.rightRotate(root.right)\r\n      return Helper.leftRotate(root)\r\n    }\r\n    \r\n    return root\r\n  }\r\n}","import Helper from './Helper'\r\n\r\nexport default class Search {\r\n  /**\r\n   * Search value in root\r\n   * @param {AVLTree} root \r\n   * @param {Any} key - serach value\r\n   * @param {String} path - path to value in object\r\n   * @returns {Boolean} - true when key was found, false if not\r\n   */\r\n  static find (root, key, path) {\r\n    if (root) {\r\n      let value = root.value\r\n      // if object get value from key\r\n      if(typeof root.value === 'object') {\r\n        value = Helper.getValueFromObject(root.value, path)\r\n      }\r\n      if (value === key) {\r\n        return true\r\n      }\r\n\r\n      // Find the element in left sub-tree\r\n      if (Search.find(root.left, key, path) === true) {\r\n        return true\r\n      } \r\n      // Find the element in right sub-tree\r\n      else if (Search.find(root.right, key, path) === true) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}","export default class TreeNode {\r\n  constructor (value) {\r\n    this.value = value\r\n    this.left = null\r\n    this.right = null\r\n    this.height = 1\r\n  }\r\n}","import TreeNode from './TreeNode'\r\nimport Helper from './Helper'\r\n\r\nexport default class Insert {\r\n  /**\r\n   * Insert new value to node.\r\n   * @param {AVLTree} root \r\n   * @param {any} key \r\n   * @param {function} comparator compare two object|value\r\n   * @returns {AVLTree} node with new value\r\n   */\r\n  static insertToNode (root, key, comparator) {\r\n    // Perform normal BST\r\n    if (!root) {\r\n      return new TreeNode(key)\r\n    } else if (comparator(key, root.value)) {\r\n      root.left = Insert.insertToNode(root.left, key, comparator)\r\n    } else {\r\n      root.right = Insert.insertToNode(root.right, key, comparator)\r\n    }\r\n\r\n    // Update the height of the ancestor nod\r\n    root.height = 1 + Helper.maxRootHeight(root)\r\n\r\n    // Get the balance factor\r\n    const balance = Helper.getBalance(root)\r\n\r\n    // If unbalanced\r\n    // Left Left\r\n    //      z                                      y \r\n    //     / \\                                   /   \\\r\n    //    y   T4      Right Rotate (z)          x      z\r\n    //   / \\          - - - - - - - - ->      /  \\    /  \\ \r\n    //  x   T3                               T1  T2  T3  T4\r\n    // / \\\r\n    // T1   T2\r\n    if (balance > 1 && comparator(key, root.value)) {\r\n      return Helper.rightRotate(root)\r\n    }\r\n    // Right Right \r\n    //    z                                y\r\n    //   /  \\                            /   \\ \r\n    //  T1   y     Left Rotate(z)       z      x\r\n    //      /  \\   - - - - - - - ->    / \\    / \\\r\n    //     T2   x                     T1  T2 T3  T4\r\n    //         / \\\r\n    //       T3  T4\r\n    if (balance < -1 && comparator(root.value, key)) {\r\n      return Helper.leftRotate(root)\r\n    }\r\n    // Left Right \r\n    //      z                               z                           x\r\n    //     / \\                            /   \\                        /  \\ \r\n    //    y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z\r\n    //   / \\      - - - - - - - - ->    /  \\      - - - - - - - ->  / \\    / \\\r\n    // T1   x                          y    T3                    T1  T2 T3  T4\r\n    //     / \\                        / \\\r\n    //   T2   T3                    T1   T2\r\n    if (balance > 1 && comparator(root.value, key)) {\r\n      root.left = Helper.leftRotate(root.left)\r\n      return Helper.rightRotate(root)\r\n    }\r\n    // Right Left\r\n    //    z                            z                            x\r\n    //   / \\                          / \\                          /  \\ \r\n    // T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y\r\n    //     / \\  - - - - - - - - ->     /  \\   - - - - - - - ->  / \\    / \\\r\n    //    x   T4                      T2   y                  T1  T2  T3  T4\r\n    //   / \\                              /  \\\r\n    // T2   T3                           T3   T4\r\n    if (balance < -1 && comparator(key, root.value)) {\r\n      root.right = Helper.rightRotate(root.right)\r\n      return Helper.leftRotate(root)\r\n    }\r\n\r\n    return root\r\n  }\r\n}","import Insert from './Insert'\nimport Helper from './Helper'\nimport Search from './Search'\nimport Delete from './Delete'\n\nexport default class AVLTree {\n  /**\n   * Constructor AVLTree\n   * @param {Function} comparator - compare two object|value  \n   */\n  constructor (comparator) {\n    this.root = null\n    this.comparator = comparator || Helper.compare\n  }\n\n  /**\n   * Add new value to tree\n   * @param {Any} key\n   */\n  insert (key) {\n    this.root = Insert.insertToNode(this.root, key, this.comparator) \n  }\n\n  /** Get height of tree\n   * @returns height of tree\n   */\n  getHeight () {\n    return Helper.getHeight(this.root)\n  }\n\n  /**\n   * Search value in tree\n   * @param {Any} value \n   * @param {String} path - list of keys in object path\n   * @returns {Boolean} - true when value was found, false if not\n   */\n  find (value, path) {\n    return Search.find(this.root, value, path)\n  }\n\n  /**\n   * Delete node with input value\n   * @param {Any} value \n   * @param {String} path - list of keys in object path\n   */\n  delete (value, path) {\n    this.root = Delete.deleteNode(this.root, value, path, this.comparator)\n  }\n\n  /**\n   * Get minimum root of tree. Depends from comparator.\n   * @param {AVLTree} root \n   * @returns {AVLTree} root with the smalest value\n   */\n  getMinValue() {\n    return Helper.getMinValueNode(this.root).value\n  }\n}\n"],"sourceRoot":""}