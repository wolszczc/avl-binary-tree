{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/TreeNode.js","webpack:///./src/AVLTree.js"],"names":["tree","insert","console","log","root","TreeNode","value","left","right","height","AVLTree","key","insertToNode","maxRootHeight","balance","getBalance","rightRotate","leftRotate","subTreeA","Math","max","getHeight"],"mappings":"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","file":"avl-tree.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import AVLTree from './AVLTree'\r\n\r\nconst tree = new AVLTree()\r\n\r\ntree.insert(1) \r\ntree.insert(2) \r\ntree.insert(3) \r\ntree.insert(4)  \r\ntree.insert(2.5)\r\ntree.insert(5) \r\ntree.insert(5) \r\ntree.insert(5) \r\n\r\nconsole.log(tree.root)","export default class TreeNode {\r\n  constructor (value) {\r\n    this.value = value\r\n    this.left = null\r\n    this.right = null\r\n    this.height = 1\r\n  }\r\n}","import TreeNode from './TreeNode'\n\nexport default class AVLTree {\n  constructor () {\n    this.root = null\n  }\n\n  /**\n   * Add new value to tree\n   * @param {value} key \n   */\n  insert (key) {\n    this.root = this.insertToNode(this.root, key) \n  }\n\n  /**\n   * Insert new value to node.\n   * @param {AVLTree} root \n   * @param {value} key \n   * @returns AVLTree with new value\n   */\n  insertToNode (root, key) {\n    // Perform normal BST\n    if (!root) {\n      return new TreeNode(key)\n    } else if (key < root.value) {\n      root.left = this.insertToNode(root.left, key)\n    } else {\n      root.right = this.insertToNode(root.right, key)\n    }\n\n    // Update the height of the ancestor nod\n    root.height = 1 + this.maxRootHeight(root)\n\n    // Get the balance factor\n    const balance = this.getBalance(root)\n\n    // If unbalanced\n    // Left Left\n    if (balance > 1 && key < root.left.value) {\n      return this.rightRotate(root)\n    }\n    // Right Right \n    if (balance < -1 && key > root.right.value) {\n      return this.leftRotate(root)\n    }\n    // Left Right \n    if (balance > 1 && key > root.left.value) {\n      root.left = this.leftRotate(root.left)\n      return this.rightRotate(root)\n    }\n    // Right Left\n    if (balance < -1 && key < root.right.value) {\n      root.right = this.rightRotate(root.right)\n      return this.leftRotate(root)\n    }\n\n    return root\n  }\n\n  /**\n   * Rotate tree to left\n   * @param {AVLTree} root \n   */\n  leftRotate (root) {\n    const subTreeA = root.right;\n\n    // perform rotation\n    [subTreeA.left, root.right] = [root, subTreeA.left]\n\n    // update heights\n    root.height = 1 + this.maxRootHeight(root)\n    subTreeA.height = 1 + this.maxRootHeight(subTreeA)\n\n    // the new root\n    return subTreeA\n  }\n\n  /**\n   * Rotate tree to right\n   * @param {AVLTree} root \n   */\n  rightRotate (root) {\n    const subTreeA = root.left;\n\n    // perform rotation\n    [subTreeA.right, root.left] = [root, subTreeA.right]\n\n    // update heights\n    root.height = 1 + this.maxRootHeight(root)\n    subTreeA.height = 1 + this.maxRootHeight(subTreeA)\n\n    // the new root\n    return subTreeA\n  }\n\n  /**\n   * Get tree height\n   * @param {AVLTree} root \n   */\n  getHeight (root) {\n    return !root ? 0 : root.height\n  }\n\n  /**\n   * Get maximum tree height\n   * @param {AVLTree} root \n   */\n  maxRootHeight (root) {\n    return Math.max(this.getHeight(root.left), this.getHeight(root.right))\n  }\n\n  /**\n   * Get balanced height\n   * @param {AVLTree} root \n   */\n  getBalance (root) {\n    return !root ? 0 : this.getHeight(root.left) - this.getHeight(root.right)\n  }\n}\n"],"sourceRoot":""}