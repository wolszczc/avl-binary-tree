{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/AVLHelper.js","webpack:///./src/index.js","webpack:///./src/TreeNode.js","webpack:///./src/Insert.js","webpack:///./src/AVLTree.js"],"names":["AVLHelper","root","subTreeA","right","left","height","maxRootHeight","Math","max","getHeight","TreeNode","value","Insert","key","insertToNode","balance","getBalance","rightRotate","leftRotate","AVLTree"],"mappings":"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","file":"avl-tree.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export default class AVLHelper {\r\n  /**\r\n   * Rotate tree to left\r\n   * @param {AVLTree} root \r\n   * @returns {AVLTree} root rotate to left\r\n   */\r\n  static leftRotate (root) {\r\n    const subTreeA = root.right;\r\n\r\n    // perform rotation\r\n    [subTreeA.left, root.right] = [root, subTreeA.left]\r\n\r\n    // update heights\r\n    root.height = 1 + AVLHelper.maxRootHeight(root)\r\n    subTreeA.height = 1 + AVLHelper.maxRootHeight(subTreeA)\r\n\r\n    // the new root\r\n    return subTreeA\r\n  }\r\n\r\n  /**\r\n   * Rotate tree to right\r\n   * @param {AVLTree} root \r\n   * @returns {AVLTree} root rotate to right\r\n   */\r\n  static rightRotate (root) {\r\n    const subTreeA = root.left;\r\n\r\n    // perform rotation\r\n    [subTreeA.right, root.left] = [root, subTreeA.right]\r\n\r\n    // update heights\r\n    root.height = 1 + AVLHelper.maxRootHeight(root)\r\n    subTreeA.height = 1 + AVLHelper.maxRootHeight(subTreeA)\r\n\r\n    // the new root\r\n    return subTreeA\r\n  }\r\n\r\n  /**\r\n   * Get tree height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} height of tree\r\n   */\r\n  static getHeight (root) {\r\n    return !root ? 0 : root.height\r\n  }\r\n\r\n  /**\r\n   * Get maximum tree height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} maximum height of branchs\r\n   */\r\n  static maxRootHeight (root) {\r\n    return Math.max(AVLHelper.getHeight(root.left), AVLHelper.getHeight(root.right))\r\n  }\r\n\r\n  /**\r\n   * Get balanced height\r\n   * @param {AVLTree} root \r\n   * @returns {Number} balanced value of branch height\r\n   */\r\n  static getBalance (root) {\r\n    return !root ? 0 : AVLHelper.getHeight(root.left) - AVLHelper.getHeight(root.right)\r\n  }\r\n}","import AVLTree from './AVLTree.js'\r\n\r\nexport default AVLTree","export default class TreeNode {\r\n  constructor (value) {\r\n    this.value = value\r\n    this.left = null\r\n    this.right = null\r\n    this.height = 1\r\n  }\r\n}","import TreeNode from './TreeNode'\r\nimport AVLHelper from './AVLHelper'\r\n\r\nexport default class Insert {\r\n  /**\r\n   * Insert new value to node.\r\n   * @param {AVLTree} root \r\n   * @param {value} key \r\n   * @returns {AVLTree} with new value\r\n   */\r\n  static insertToNode (root, key) {\r\n    // Perform normal BST\r\n    if (!root) {\r\n      return new TreeNode(key)\r\n    } else if (key < root.value) {\r\n      root.left = Insert.insertToNode(root.left, key)\r\n    } else {\r\n      root.right = Insert.insertToNode(root.right, key)\r\n    }\r\n\r\n    // Update the height of the ancestor nod\r\n    root.height = 1 + AVLHelper.maxRootHeight(root)\r\n\r\n    // Get the balance factor\r\n    const balance = AVLHelper.getBalance(root)\r\n\r\n    // If unbalanced\r\n    // Left Left\r\n    if (balance > 1 && key < root.left.value) {\r\n      return AVLHelper.rightRotate(root)\r\n    }\r\n    // Right Right \r\n    if (balance < -1 && key > root.right.value) {\r\n      return AVLHelper.leftRotate(root)\r\n    }\r\n    // Left Right \r\n    if (balance > 1 && key > root.left.value) {\r\n      root.left = AVLHelper.leftRotate(root.left)\r\n      return AVLHelper.rightRotate(root)\r\n    }\r\n    // Right Left\r\n    if (balance < -1 && key < root.right.value) {\r\n      root.right = AVLHelper.rightRotate(root.right)\r\n      return AVLHelper.leftRotate(root)\r\n    }\r\n\r\n    return root\r\n  }\r\n}","import Insert from './Insert'\nimport AVLHelper from './AVLHelper'\n\nexport default class AVLTree {\n  constructor () {\n    this.root = null\n  }\n\n  /**\n   * Add new value to tree\n   * @param {value} key \n   */\n  insert (key) {\n    this.root = Insert.insertToNode(this.root, key) \n  }\n\n  /**\n   * @returns height of tree\n   */\n  height () {\n    return AVLHelper.getHeight(this.root)\n  }\n}\n"],"sourceRoot":""}