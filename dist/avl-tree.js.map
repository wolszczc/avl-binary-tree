{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Helper.js","webpack:///./src/index.js","webpack:///./src/AVLTree.js","webpack:///./src/Insert.js","webpack:///./src/TreeNode.js","webpack:///./src/Search.js","webpack:///./src/Delete.js"],"names":["Helper","root","subTreeA","right","left","height","maxRootHeight","Math","max","getHeight","valueA","valueB","getLastRightRoot","getLastLeftRoot","key","path","value","split","forEach","keyName","AVLTree","options","comparator","compare","isRepeat","Insert","insertToNode","keys","insertArray","Search","find","Delete","deleteNode","TreeNode","balance","getBalance","rightRotate","leftRotate","getValueFromObject","rootRight","rootLeft","minValueRoot","getMinValueNode"],"mappings":"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","file":"avl-tree.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class Helper {\n  /**\n   * Rotate tree to left\n   * @param {AVLTree} root\n   * @returns {AVLTree} root rotate to left\n   */\n  static leftRotate (root) {\n    const subTreeA = root.right;\n\n    // perform rotation\n    [subTreeA.left, root.right] = [root, subTreeA.left]\n\n    // update heights\n    root.height = 1 + Helper.maxRootHeight(root)\n    subTreeA.height = 1 + Helper.maxRootHeight(subTreeA)\n\n    // the new root\n    return subTreeA\n  }\n\n  /**\n   * Rotate tree to right\n   * @param {AVLTree} root\n   * @returns {AVLTree} root rotate to right\n   */\n  static rightRotate (root) {\n    const subTreeA = root.left;\n\n    // perform rotation\n    [subTreeA.right, root.left] = [root, subTreeA.right]\n\n    // update heights\n    root.height = 1 + Helper.maxRootHeight(root)\n    subTreeA.height = 1 + Helper.maxRootHeight(subTreeA)\n\n    // the new root\n    return subTreeA\n  }\n\n  /**\n   * Get tree height\n   * @param {AVLTree} root\n   * @returns {Number} height of tree\n   */\n  static getHeight (root) {\n    return !root ? 0 : root.height\n  }\n\n  /**\n   * Get maximum tree height\n   * @param {AVLTree} root\n   * @returns {Number} maximum height of branchs\n   */\n  static maxRootHeight (root) {\n    return Math.max(Helper.getHeight(root.left), Helper.getHeight(root.right))\n  }\n\n  /**\n   * Get balanced height\n   * @param {AVLTree} root\n   * @returns {Number} balanced value of branch height\n   */\n  static getBalance (root) {\n    return !root ? 0 : Helper.getHeight(root.left) - Helper.getHeight(root.right)\n  }\n\n  /**\n   * Default comparator of two values\n   * @param {Number|String} valueA\n   * @param {Number|String} valueB\n   * @returns {boolean} comparison valueA and valueB\n   */\n  static compare (valueA, valueB) {\n    return valueA < valueB\n  }\n\n  /**\n   * Get deepest right root of tree.\n   * @param {AVLTree} root\n   * @returns {AVLTree} last right root\n   */\n  static getLastRightRoot (root) {\n    if (root === null || root.right === null) {\n      return root\n    }\n    return Helper.getLastRightRoot(root.right)\n  }\n\n  /**\n   * Get deepest left root of tree.\n   * @param {AVLTree} root\n   * @returns {AVLTree} last left root\n   */\n  static getLastLeftRoot (root) {\n    if (root === null || root.left === null) {\n      return root\n    }\n    return Helper.getLastLeftRoot(root.left)\n  }\n\n  /**\n   * Get value from object\n   * @param {Object} key - searched object\n   * @param {String} path - path to value in object\n   * @returns {*} - value of path in object\n   */\n  static getValueFromObject (key, path) {\n    let value = key\n    path.split('.').forEach((keyName) => {\n      value = value[keyName]\n    })\n    return value\n  }\n}\n","import AVLTree from './AVLTree.js'\n\nexport default AVLTree\n","import Insert from './Insert'\nimport Helper from './Helper'\nimport Search from './Search'\nimport Delete from './Delete'\n\nexport default class AVLTree {\n  /**\n   * Constructor AVLTree\n   * @param {Object} options - AVLTree options\n   * @param {Function} options.comparator - compare two objects|values\n   * @param {String} options.path - list of keys in object path\n   */\n  constructor (options = {}) {\n    this.root = null\n    this.comparator = options.comparator || Helper.compare\n    this.path = options.path || ''\n    this.isRepeat = options.isRepeat\n  }\n\n  /**\n   * Add new value to tree\n   * @param {*} key\n   */\n  insert (key) {\n    this.root = Insert.insertToNode(this.root, key, this.comparator)\n  }\n\n  /**\n   * Add new array to tree\n   * @param {Array} keys\n   */\n  insertArray (keys) {\n    this.root = Insert.insertArray(this.root, keys, this.comparator)\n  }\n\n  /** Get height of tree\n   * @returns height of tree\n   */\n  getHeight () {\n    return Helper.getHeight(this.root)\n  }\n\n  /**\n   * Search value in tree\n   * @param {*} value\n   * @param {String} path - list of keys in object path\n   * @returns {Boolean} - true when value was found, false if not\n   */\n  find (value, path = this.path) {\n    return Search.find(this.root, value, path)\n  }\n\n  /**\n   * Delete node with input value\n   * @param {*} value\n   * @param {String} path - list of keys in object path\n   */\n  delete (value, path = this.path) {\n    this.root = Delete.deleteNode(this.root, value, path, this.comparator)\n  }\n\n  /**\n   * Get minimum root of tree. Depends from comparator.\n   * @returns {AVLTree} root with the smalest value\n   */\n  getMinValue () {\n    return Helper.getLastLeftRoot(this.root).value\n  }\n\n  /**\n   * Get maximum root of tree. Depends from comparator.\n   * @returns {AVLTree} root with the biggest value\n   */\n  getMaxValue () {\n    return Helper.getLastRightRoot(this.root).value\n  }\n}\n","import TreeNode from './TreeNode'\nimport Helper from './Helper'\n\nexport default class Insert {\n  /**\n   * Insert new value to node.\n   * @param {AVLTree} root\n   * @param {*} key\n   * @param {function} comparator compare two object|value\n   * @returns {AVLTree} node with new value\n   */\n  static insertToNode (root, key, comparator) {\n    // Perform normal BST\n    if (!root) {\n      return new TreeNode(key)\n    } else if (comparator(key, root.value)) {\n      root.left = Insert.insertToNode(root.left, key, comparator)\n    } else {\n      root.right = Insert.insertToNode(root.right, key, comparator)\n    }\n\n    // Update the height of the ancestor nod\n    root.height = 1 + Helper.maxRootHeight(root)\n\n    // Get the balance factor\n    const balance = Helper.getBalance(root)\n\n    // If unbalanced\n    // Left Left\n    //      z                                      y\n    //     / \\                                   /   \\\n    //    y   T4      Right Rotate (z)          x      z\n    //   / \\          - - - - - - - - ->      /  \\    /  \\\n    //  x   T3                               T1  T2  T3  T4\n    // / \\\n    // T1   T2\n    if (balance > 1 && comparator(key, root.value)) {\n      return Helper.rightRotate(root)\n    }\n    // Right Right\n    //    z                                y\n    //   /  \\                            /   \\\n    //  T1   y     Left Rotate(z)       z      x\n    //      /  \\   - - - - - - - ->    / \\    / \\\n    //     T2   x                     T1  T2 T3  T4\n    //         / \\\n    //       T3  T4\n    if (balance < -1 && comparator(root.value, key)) {\n      return Helper.leftRotate(root)\n    }\n    // Left Right\n    //      z                               z                           x\n    //     / \\                            /   \\                        /  \\\n    //    y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z\n    //   / \\      - - - - - - - - ->    /  \\      - - - - - - - ->  / \\    / \\\n    // T1   x                          y    T3                    T1  T2 T3  T4\n    //     / \\                        / \\\n    //   T2   T3                    T1   T2\n    if (balance > 1 && comparator(root.value, key)) {\n      root.left = Helper.leftRotate(root.left)\n      return Helper.rightRotate(root)\n    }\n    // Right Left\n    //    z                            z                            x\n    //   / \\                          / \\                          /  \\\n    // T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y\n    //     / \\  - - - - - - - - ->     /  \\   - - - - - - - ->  / \\    / \\\n    //    x   T4                      T2   y                  T1  T2  T3  T4\n    //   / \\                              /  \\\n    // T2   T3                           T3   T4\n    if (balance < -1 && comparator(key, root.value)) {\n      root.right = Helper.rightRotate(root.right)\n      return Helper.leftRotate(root)\n    }\n\n    return root\n  }\n\n  /**\n   * Insert array to node.\n   * @param {AVLTree} root\n   * @param {Array} keys\n   * @param {function} comparator compare two object|value\n   * @returns {AVLTree} node with new value\n   */\n  static insertArray (root, keys, comparator) {\n    for (let key of keys) {\n      root = Insert.insertToNode(root, key, comparator)\n    }\n    return root\n  }\n}\n","export default class TreeNode {\n  constructor (value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.height = 1\n  }\n}","import Helper from './Helper'\n\nexport default class Search {\n  /**\n   * Search value in root\n   * @param {AVLTree} root\n   * @param {*} key - serach value\n   * @param {String} path - path to value in object\n   * @returns {Boolean} - true when key was found, false if not\n   */\n  static find (root, key, path) {\n    if (root) {\n      let value = root.value\n      // if object get value from key\n      if (typeof root.value === 'object') {\n        value = Helper.getValueFromObject(root.value, path)\n      }\n      if (value === key) {\n        return true\n      }\n\n      // Find the element in left sub-tree\n      if (Search.find(root.left, key, path) === true) {\n        return true\n      }\n      // Find the element in right sub-tree\n      else if (Search.find(root.right, key, path) === true) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n","import Helper from './Helper'\n\nexport default class Delete {\n  /**\n   * Delete node with input value\n   * @param {AVLTree} root\n   * @param {*} key\n   * @param {String} path - list of keys in object path\n   * @param {Function} comparator compare two object|value\n   * @returns {AVLTree} new tree without deleted node\n   */\n  static deleteNode (root, key, path, comparator) {\n    // Perform standard BST delete\n    if (!root) {\n      return root\n    } else {\n      let value = root.value\n      // if object get value from key\n      if (typeof root.value === 'object') {\n        value = Helper.getValueFromObject(root.value, path)\n      }\n      if (key < value) {\n        root.left = Delete.deleteNode(root.left, key, path, comparator)\n      } else if (key > value) {\n        root.right = Delete.deleteNode(root.right, key, path, comparator)\n      } else {\n        if (!root.left) {\n          const rootRight = root.right\n          root = null\n          return rootRight\n        } else if (!root.right) {\n          const rootLeft = root.left\n          root = null\n          return rootLeft\n        }\n        const minValueRoot = Helper.getMinValueNode(root.right)\n        root.value = minValueRoot.value\n        root.right = Delete.deleteNode(root.right, minValueRoot, comparator)\n      }\n    }\n\n    // If the tree has only one node\n    if (!root) {\n      return root\n    }\n\n    // Update the height of the ancestor node\n    root.height = 1 + Helper.maxRootHeight(root)\n\n    // Get the balance factor\n    const balance = Helper.getBalance(root)\n\n    // If the node is unbalanced\n    // Left Left\n    if (balance > 1 && Helper.getBalance(root.left) >= 0) {\n      return Helper.rightRotate(root)\n    }\n    // Right Right\n    if (balance < -1 && Helper.getBalance(root.right) <= 0) {\n      return Helper.leftRotate(root)\n    }\n    // Left Right\n    if (balance > 1 && Helper.getBalance(root.left) < 0) {\n      root.left = Helper.leftRotate(root.left)\n      return Helper.rightRotate(root)\n    }\n    // Right Left\n    if (balance < -1 && Helper.getBalance(root.right) > 0) {\n      root.right = Helper.rightRotate(root.right)\n      return Helper.leftRotate(root)\n    }\n\n    return root\n  }\n}\n"],"sourceRoot":""}